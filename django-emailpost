#!/usr/bin/env python

#   Copyright 2011 Josh Kearney
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

"""django-emailpost - Post to Django blogs via email."""

from __future__ import with_statement

import optparse
import os
import sys

from django.conf import settings

from email import message_from_file
from email.parser import Parser


__VERSION__ = "0.0.1"
__TMP_FILE__ = "/tmp/django-emailpost.txt"


def capture_headers(msg):
    """Capture and return the email's headers."""
    return dict(
            original_recipient=os.getenv("ORIGINAL_RECIPIENT"),
            sender=os.getenv("SENDER"),
            subject=msg["SUBJECT"])


def walk_email(msg, attachment_dir):
    """Walk through the email and return its body with attachments."""
    body = ""
    attachments = []

    for part in msg.walk():
        part_type = part.get_content_type()

        if part_type.startswith("image"):
            filename = part.get_filename()
            # TODO(jk0): Prevent existing files from being overwritten.
            with open(os.path.join(attachment_dir, filename), "w") as f:
                f.write(part.get_payload(decode=True))
            f.closed

            attachments.append(filename)
        elif part_type == "text/plain":
            body = part.get_payload()

    return (body, attachments)


def slugify_subject(subject):
    """Convert the email's subject into a pretty URL slug."""
    pass


def insert_post():
    """Insert the new post into the Django DB."""
    pass


def build_options():
    """Generate command line options."""
    parser = optparse.OptionParser(version=__VERSION__)

    parser.add_option("-p", "--project-path", dest="project_path",
            help="path of the Django project")
    parser.add_option("-r", "--recipients", dest="recipients",
            help="list of accepted recipients")
    parser.add_option("-s", "--senders", dest="senders",
            help="list of accepted senders")

    return parser.parse_args()


if __name__ == "__main__":
    OPTIONS, ARGS = build_options()
    PROJECT_PATH = OPTIONS.project_path
    RECIPIENTS = OPTIONS.recipients
    SENDERS = OPTIONS.senders

    if not PROJECT_PATH:
        sys.exit("Must supply path to Django project.")
    elif not RECIPIENTS:
        sys.exit("Must supply a recipient.")
    elif not SENDERS:
        sys.exit("Must supply a sender.")

    # Prepare Django project's env vars.
    sys.path.append(PROJECT_PATH)
    sys.path.append(PROJECT_PATH + "/../")
    os.environ["DJANGO_SETTINGS_MODULE"]= "%s.settings" % os.path.basename(
            PROJECT_PATH)

    # Postfix sends messages via stdin.
    MSG = Parser().parse(sys.stdin)

    HEADERS = capture_headers(MSG)
    BODY, ATTACHMENTS = walk_email(MSG, settings.MEDIA_ROOT)

    with open(__TMP_FILE__, "w") as f:
        f.write("%s\n%s\n%s\n%s\n%s" % (
                HEADERS["original_recipient"], HEADERS["sender"],
                HEADERS["subject"], BODY, ATTACHMENTS))
    f.closed
