#!/usr/bin/env python

#   Copyright 2011 Josh Kearney
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

"""django-emailpost - Post to Django blogs via email."""

from __future__ import with_statement

import os
import sys

from email import message_from_file
from email.parser import Parser


# Postfix sends  messages via stdin.
MSG = Parser().parse(sys.stdin)

# We can't use os.getenv("HOME") here because postfix is not running under my
# UID. Temporarily hardcoded the path. Change manually while testing.
__TMP_HOME_DIR__ = "/home/jkearney"
__TMP_FILE__ = __TMP_HOME_DIR__ + "/django-emailpost.txt"
__TMP_ATTACHMENT_DIR__ = __TMP_HOME_DIR__


def capture_headers(msg):
    """Capture and return the email's headers."""
    return dict(
            original_recipient=os.getenv("ORIGINAL_RECIPIENT"),
            sender=os.getenv("SENDER"),
            subject=msg["SUBJECT"])


def walk_email(msg, attachment_dir):
    """Walk through the email and return its body with attachments."""
    body = ""
    attachments = []

    for part in msg.walk():
        part_type = part.get_content_type()

        if part_type.startswith("image"):
            filename = part.get_filename()
            # TODO(jk0): Prevent existing files from being overwritten.
            with open(os.path.join(attachment_dir, filename), "w") as f:
                f.write(part.get_payload(decode=True))
            f.closed

            attachments.append(filename)
        elif part_type == "text/plain":
            body = part.get_payload()

    return (body, attachments)


if __name__ == "__main__":
    HEADERS = capture_headers(MSG)
    BODY, ATTACHMENTS = walk_email(MSG, __TMP_ATTACHMENT_DIR__)

    with open(__TMP_FILE__, "w") as f:
        f.write("%s\n%s\n%s\n%s\n%s" % (
                HEADERS["original_recipient"], HEADERS["sender"],
                HEADERS["subject"], BODY, ATTACHMENTS))
    f.closed
